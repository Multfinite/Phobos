[General]
SharedSensors=false ; boolean

[CloakTypes]
0=CT_0
1=CT_1

[CT_0]
Delay= ; frames. if not present take default
InMovement=true ; boolean
Shadow=false ; boolean
Sharing=default ; EffectShareMode
Type=Virtual ; Virtual | Stealth | Disguise | Camouflage
Type.Stealth.Stages=
Type.Stealth.Durations=
Type.Disguise.Infantry.Enabled=false ; is X enabled to be picked
Type.Disguise.Infantry.Allowed= ; these direct given types have highest priority at resoving with `Type.Disguise.Type`
Type.Disguise.Infantry.Forbidden= ; these direct given types are excluded and will not appear as image when object disguised
Type.Disguise.Vehicles.Enabled=false 
Type.Disguise.Vehicles.Allowed=
Type.Disguise.Vehicles.Forbidden=
Type.Disguise.Aircraft.Enabled=false
Type.Disguise.Aircraft.Allowed=
Type.Disguise.Aircraft.Forbidden=
Type.Disguise.Naval.Enabled=false
Type.Disguise.Naval.Allowed=
Type.Disguise.Naval.Forbidden=
Type.Disguise.Target=enemy ; all | owner | enemy | ally - need to check existing enum for it
Type.Disguise.EnemyControl.Enabled=false ; boolean can be switched to enemy controllable mode
Type.Disguise.EnemyControl.Warn=true ; boolean
Type.Disguise.EnemyControl.Warn.Eva=
Type.Disguise.EnemyControl.Raport=true ; boolean
Type.Camouflage.Overlays.Enabled=false
Type.Camouflage.Overlays.Allowed=
Type.Camouflage.Overlays.Forbidden=
Type.Camouflage.Sound=false ; boolean
Type.Camouflage.Sound.Override= ; idk? refer to type and take it's values? refer to sound itself?
Air.Enabled=true ; boolean while cloak disabled it can not be detected by sensor
Air.Sound.In= ; sound when object enters into cloak
Air.Sound.Out= ; sound when objects leave cloak
Ground.Enabled=true ; boolean
Ground.Sound.In=
Ground.Sound.Out=
Subterannean.Enabled=true ; boolean
Subterannean.Sound.In=
Subterannean.Sound.Out=
Warn=true ; 
Warn.Eva= ; define special sound for this type
Warn.Eva.Side._side_=
Warn.Eva.Country._country_=

[TECHNO_CLOAKED]
Cloak.Types=CT_0, CT_1 ; cloak type
Cloak.Self=true, true ; boolean[] is should be used on owner?
Cloak.Radiuses=0, 1 ; int, cells 0 - affect only self
Cloak.Shadows=false, flase ; boolean - is it should be shadown drawn?
Cloak.AsPasssenger=true, true ; boolean[] allow to use this from transport
Cloak.AsOccupant=true, true ; boolean[] allow to use this from building
; need to think 
Cloak.Warn=false ; redefine warning type for this unit
Cloak.Warn.Eva= ; redefine special sound for this type
Cloak.Warn.Eva.Side._side_=
Cloak.Warn.Eva.Country._country_=

[TECHNO_UNCLOAKABLE]
Cloak.Allowed=
Cloak.Forbidden=CT_0,CT_1

[SensorTypes]
0=ST_0
1=ST_1

[ST_0]
Senses.Allowed=CT_0,CT_1 ; list of CloakType to be sensed (empty - ALL ALLOWED)
Senses.Forbidden=
Sharing=Default ; EffectShareMode Default | Shared | Private
IsStrong=true ; boolean. If enabled then object became sensed if any cloak types from `Senses` present. If disabled then object became sensed if all cloaks presented in `Senses` list.
Selectable=false ; boolean can be detected object selectable?
Delay=0 ; (int, frames) rest of scan - time between two scans
Duration=0 ; (int, frames) active time of scan
CellIncrement=0 ; (int) how many cells will be added at each `Duration` time reach and total scan duration is `Duration`*`Max(Sensor.Sights of type/CellIncrement)`. value 0> will activate this logic.
Air.Scan=true ; boolean
Air.Track=false ; boolean
Air.Decloak=false ; boolean
Air.Display=false ; boolean
Air.Weapon= ; weapon type to be applied to any sensed target
Air.Animation= ; animation on sensed object
Ground.Scan=true ; boolean
Ground.Track=false ; boolean
Ground.Decloak=false ; boolean
Ground.Display=false ; boolean
Ground.Weapon= ; weapon type to be applied to any sensed target
Ground.Animation= ; animation on sensed object
Subterannean.Scan=true ; boolean
Subterannean.Track=false ; boolean
Subterannean.Decloak=false ; boolean
Subterannean.Display=false ; boolean
Subterannean.Weapon= ; weapon type to be applied to any sensed target
Subterannean.Animation= ; animation on sensed object
ForceShadows=false ; boolean
InMovement=true ; boolean Is it can scan during movement?
Animation= ; Animation on sensor
Warn=false ; boolean warn if this sensor detect something
Warn.Eva=false ; redefine default warning sound
Warn.Eva.Side._side_=
Warn.Eva.Country._country_=

[TECHNO_SENSOR]
Sensor.Types=ST_0,ST_1 ; list of SensorType to use as sensor
Sensor.Radiuses=10,11 ; list of SensorSight for each SensorType
Sensor.Durations=0,0 ; int[] frames, time when affacted cloaks can recloak after leaving zone of sensor
Sensor.Lifetimes=-1,-1 ; lifetime of this sensor
Sensor.AsPasssenger=true, true ; boolean[] allow to use this from transport
Sensor.AsOccupant=true, true ; boolean[] allow to use this from building

[PROJECTILE_SENSOR]
Sensor.Types=
Sensor.Radiuses=
Sensor.Durations=
Sensor.Lifetimes=

[WARHEAD_SENSOR]
Sensor.Types=
Sensor.Radiuses=
Sensor.Durations=
Sensor.Lifetimes=

[EWTypes]
0=EWT_0
1=EWT_1

[EWT_0]
Targets.Sensors=ST_0 ; SensorTypeClass[]
Targets.Cloaks=
Targets.EWs=
Air.Weapon= ; weapon type to be applied to any supressed target
Air.Animation= ; animation on supressed object
Ground.Weapon= ; weapon type to be applied to any supressed target
Ground.Animation= ; animation on supressed object
Subterannean.Weapon= ; weapon type to be applied to any supressed target
Subterannean.Animation= ; animation on supressed object

; NEED TO RESTORE SENSOR WHICH WAS AFFECTED BY 
; EW.Duration=-1 (Always) supressors (BTW - restore even any suppresion presents)
[TECHNO_SENSOR_SUPRESSOR]
EW.Types=EWT_0,EWT_1
EW.Targets= ; Modes[] Area (only cells) | Sensors (on parents) | All (Area and Sensors)
EW.Radiuses=10,11 ; int[] cells
EW.Durations=60,90 ; int[] frames, time to restore sensor after leaving supressor
EW.Lifetime=-1,-1
EW.Indiscriminate=false,false ; boolean[] enables logic while ally and owned sensors be supressed
EW.AsPasssenger=true, true ; boolean[] allow to use this from transport
EW.AsOccupant=true, true ; boolean[] allow to use this from building

[PROJECTILE_SENSOR_SUPRESSOR]
EW.Types=
EW.Targets=
EW.Radiuses=
EW.Durations=
EW.Lifetime=
EW.Indiscriminate=

[WARHEAD_SENSOR_SUPRESSOR]
EW.Types=
EW.Targets=
EW.Radiuses=
EW.Durations=
EW.Lifetime=
EW.Indiscriminate=

; Mind
[SOMETECHNO]
Trackable.Air=true ; boolean ?
Trackable.Ground=true ; boolean ?
Trackable.Subterannean=true ; ?
Trackable.ST_0.Air=false ; ?
Mind.Readable=true ;boolean